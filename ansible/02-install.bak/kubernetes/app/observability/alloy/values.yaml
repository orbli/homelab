# Grafana Alloy Configuration for Pod Log Collection
# This replaces OpenTelemetry Collector and provides unified telemetry collection

alloy:
  # Main Alloy configuration
  configMap:
    create: true
    content: |
      // Pod Discovery and Log Collection
      discovery.kubernetes "pods" {
        role = "pod"
        namespaces {
          own_namespace = false
          names = ["devops", "iam", "observability", "networking", "kube-system", "gitops", "default"]
        }
      }

      // Relabel and filter pod logs
      discovery.relabel "pods" {
        targets = discovery.kubernetes.pods.targets

        // Keep pod name
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
        }

        // Keep namespace
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }

        // Keep container name
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
        }

        // Keep node name
        rule {
          source_labels = ["__meta_kubernetes_pod_node_name"]
          target_label  = "node"
        }

        // Add app label if exists
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          target_label  = "app"
        }

        // Add deployment name if exists
        rule {
          source_labels = ["__meta_kubernetes_pod_controller_name"]
          target_label  = "deployment"
        }

        // Set the __path__ label to the container log path
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          separator     = "/"
          target_label  = "__path__"
          replacement   = "/var/log/pods/*$1/$2/*.log"
        }
      }

      // Collect logs from Kubernetes pods
      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pods.output
        forward_to = [loki.process.pod_logs.receiver]
      }

      // Process logs before sending to Loki
      loki.process "pod_logs" {
        forward_to = [loki.write.default.receiver]

        // Parse JSON logs if present
        stage.json {
          expressions = {
            level     = "level"
            msg       = "msg"
            timestamp = "time"
          }
        }

        // Extract level from various formats
        stage.regex {
          expression = "(?P<level>(DEBUG|INFO|WARN|ERROR|FATAL|debug|info|warn|error|fatal))"
        }

        // Add level as label
        stage.labels {
          values = {
            level = ""
          }
        }

        // Add timestamp
        stage.timestamp {
          source = "timestamp"
          format = "RFC3339"
          fallback_formats = ["UnixMs", "UnixNs", "Unix"]
        }
      }

      // Write logs to Loki
      loki.write "default" {
        endpoint {
          url = "http://loki.observability.svc.home-hk1-cluster.orbb.li:3100/loki/api/v1/push"
          
          // Add tenant header if needed
          headers = {
            "X-Scope-OrgID" = "1"
          }
        }
      }

      // Expose Alloy internal metrics for Prometheus to scrape
      prometheus.exporter.self "alloy" {
      }

      // Scrape Alloy's own metrics
      prometheus.scrape "alloy" {
        targets    = prometheus.exporter.self.alloy.targets
        forward_to = [prometheus.remote_write.default.receiver]
      }

      // Remote write metrics to Prometheus (optional - since Prometheus already scrapes directly)
      prometheus.remote_write "default" {
        endpoint {
          url = "http://prometheus-kube-prometheus-prometheus.observability.svc.home-hk1-cluster.orbb.li:9090/api/v1/write"
        }
      }

  # Clustering for high availability
  clustering:
    enabled: true

  # Resources
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Deploy as DaemonSet to collect logs from all nodes
controller:
  type: daemonset
  
  # Mount paths for log collection
  volumeMounts:
    - name: varlog
      mountPath: /var/log
      readOnly: true
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true

  volumes:
    - name: varlog
      hostPath:
        path: /var/log
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers

# Service for metrics endpoint
service:
  enabled: true
  type: ClusterIP

# ServiceMonitor for Prometheus to scrape Alloy metrics
serviceMonitor:
  enabled: true
  interval: 30s

# Enable RBAC for Kubernetes API access
rbac:
  create: true

# Service account
serviceAccount:
  create: true
  name: alloy

# Pod Security Policy (if needed)
podSecurityPolicy:
  enabled: false

# Tolerations to run on all nodes including control plane
tolerations:
  - effect: NoSchedule
    operator: Exists