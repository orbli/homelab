---
- name: Deploy Observability Stack (Prometheus & Loki)
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    namespace: observability
    repo_url: "https://github.com/orbli/homelab.git"
    
  tasks:
    - name: Check if namespace already exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
      register: namespace_check

    - name: Check for existing PVCs that might have old data
      kubernetes.core.k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: "{{ namespace }}"
      register: existing_pvcs
      when: namespace_check.resources | length > 0

    - name: Warn about existing PVCs
      debug:
        msg: |
          WARNING: Found existing PVCs in namespace {{ namespace }}:
          {{ existing_pvcs.resources | map(attribute='metadata.name') | list }}
          These may contain old data. Consider running cleanup-observability.yaml first.
      when: 
        - namespace_check.resources | length > 0
        - existing_pvcs.resources | length > 0

    - name: Create ArgoCD Application for observability namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: observability-namespace
            namespace: gitops
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: "{{ repo_url }}"
              targetRevision: master
              path: kubernetes/apps/observability/namespace
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ namespace }}"
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=false
                - ApplyOutOfSyncOnly=true

    - name: Sync observability namespace
      shell: |
        argocd app sync observability-namespace --grpc-web
      register: namespace_sync
      changed_when: "'synced' in namespace_sync.stdout"

    - name: Wait for namespace to be created
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
      register: namespace_status
      until: namespace_status.resources | length > 0
      retries: 30
      delay: 2

    - name: Create ArgoCD Application for Prometheus
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: prometheus
            namespace: gitops
            finalizers:
              - resources-finalizer.argocd.argoproj.io
            annotations:
              argocd.argoproj.io/sync-wave: "10"
          spec:
            project: default
            source:
              repoURL: https://prometheus-community.github.io/helm-charts
              targetRevision: 69.2.0
              chart: kube-prometheus-stack
              helm:
                releaseName: prometheus
                valuesFile: /home/eli/workbench/homelab/kubernetes/apps/observability/prometheus/values.yaml
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ namespace }}"
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - ServerSideApply=true
                - ApplyOutOfSyncOnly=true

    - name: Create ArgoCD Application for Loki
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: loki
            namespace: gitops
            finalizers:
              - resources-finalizer.argocd.argoproj.io
            annotations:
              argocd.argoproj.io/sync-wave: "20"
          spec:
            project: default
            source:
              repoURL: "{{ repo_url }}"
              targetRevision: master
              path: kubernetes/apps/observability/loki
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ namespace }}"
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - ServerSideApply=true
                - ApplyOutOfSyncOnly=true

    - name: Sync Prometheus application
      shell: |
        argocd app sync prometheus --grpc-web
      register: prometheus_sync
      changed_when: "'synced' in prometheus_sync.stdout"

    - name: Sync Loki application
      shell: |
        argocd app sync loki --grpc-web
      register: loki_sync
      changed_when: "'synced' in loki_sync.stdout"

    - name: Wait for Prometheus operator to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: prometheus-kube-prometheus-operator
        namespace: "{{ namespace }}"
      register: prometheus_operator
      until: 
        - prometheus_operator.resources | length > 0
        - prometheus_operator.resources[0].status.readyReplicas | default(0) > 0
      retries: 60
      delay: 5

    - name: Wait for Prometheus StatefulSet to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: prometheus-prometheus-kube-prometheus-prometheus
        namespace: "{{ namespace }}"
      register: prometheus_sts
      until:
        - prometheus_sts.resources | length > 0
        - prometheus_sts.resources[0].status.readyReplicas | default(0) > 0
      retries: 60
      delay: 5

    - name: Wait for Loki to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: loki
        namespace: "{{ namespace }}"
      register: loki_sts
      until:
        - loki_sts.resources | length > 0
        - loki_sts.resources[0].status.readyReplicas | default(0) > 0
      retries: 60
      delay: 5

    - name: Get Prometheus service endpoint
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: prometheus-kube-prometheus-prometheus
        namespace: "{{ namespace }}"
      register: prometheus_svc

    - name: Get Loki service endpoint
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: loki-gateway
        namespace: "{{ namespace }}"
      register: loki_svc

    - name: Create ArgoCD Application for Alloy
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: alloy
            namespace: gitops
            finalizers:
              - resources-finalizer.argocd.argoproj.io
            annotations:
              argocd.argoproj.io/sync-wave: "30"
          spec:
            project: default
            source:
              repoURL: "{{ repo_url }}"
              targetRevision: master
              path: kubernetes/apps/observability/alloy
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ namespace }}"
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - ServerSideApply=true
                - ApplyOutOfSyncOnly=true

    - name: Sync Alloy application
      shell: |
        argocd app sync alloy --grpc-web
      register: alloy_sync
      changed_when: "'synced' in alloy_sync.stdout"

    - name: Wait for Alloy DaemonSet to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: DaemonSet
        name: alloy
        namespace: "{{ namespace }}"
      register: alloy_ds
      until:
        - alloy_ds.resources | length > 0
        - alloy_ds.resources[0].status.numberReady | default(0) > 0
      retries: 60
      delay: 5

    - name: Display deployment information
      debug:
        msg: |
          Observability Stack deployed successfully!
          
          Prometheus:
          - URL: http://prometheus-kube-prometheus-prometheus.{{ namespace }}.svc.home-hk1-cluster.orbb.li:9090
          - Service: {{ prometheus_svc.resources[0].metadata.name if prometheus_svc.resources else 'Not found' }}
          
          Loki:
          - URL: http://loki.{{ namespace }}.svc.home-hk1-cluster.orbb.li:3100
          - Service: {{ loki_svc.resources[0].metadata.name if loki_svc.resources else 'Not found' }}
          
          AlertManager:
          - URL: http://prometheus-kube-prometheus-alertmanager.{{ namespace }}.svc.home-hk1-cluster.orbb.li:9093
          
          Alloy (Log Collector):
          - Collecting logs from all pods in configured namespaces
          - Forwarding to Loki automatically
          
          Next Steps:
          1. Deploy Grafana for visualization
          2. Configure additional service monitors for your applications