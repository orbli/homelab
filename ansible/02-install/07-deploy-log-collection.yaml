---
- name: Deploy Log Collection Stack (Loki & Alloy) via ArgoCD
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    namespace: observability
    gitops_namespace: gitops
    argocd_apps_path: "../../kubernetes/gitops/apps"
    
  tasks:
    - name: Ensure ArgoCD is running
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: argocd-application-controller
        namespace: "{{ gitops_namespace }}"
      register: argocd_check
      failed_when: 
        - argocd_check.resources | length == 0
        - argocd_check.resources[0].status.readyReplicas | default(0) == 0
    
    - name: Check for existing Helm releases to migrate
      shell: |
        helm list -n {{ namespace }} -o json | jq -r '.[].name' | grep -E '^(loki|alloy)$' || true
      register: existing_helm_releases
      changed_when: false
    
    - name: Migrate from Helm to ArgoCD if needed
      block:
        - name: Remove existing Helm-managed releases
          shell: |
            helm uninstall {{ item }} -n {{ namespace }} --wait
          loop: "{{ existing_helm_releases.stdout_lines }}"
          when: item != ""
        
        - name: Wait for resources to be removed
          pause:
            seconds: 10
            prompt: "Waiting for Helm resources to be fully removed..."
      when: existing_helm_releases.stdout != ""
    
    - name: Apply Observability Stack App of Apps
      shell: |
        kubectl apply -f /home/eli/workbench/homelab/kubernetes/gitops/apps/observability-stack-app.yaml
      register: stack_app
      changed_when: "'configured' in stack_app.stdout or 'created' in stack_app.stdout"
    
    - name: Wait for App of Apps to sync
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: observability-stack
        namespace: "{{ gitops_namespace }}"
      register: app_of_apps
      until:
        - app_of_apps.resources | length > 0
        - app_of_apps.resources[0].status.sync.status | default('Unknown') == 'Synced'
        - app_of_apps.resources[0].status.health.status | default('Unknown') == 'Healthy'
      retries: 60
      delay: 10
    
    - name: Wait for child applications to be created and synced
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ item }}"
        namespace: "{{ gitops_namespace }}"
      register: child_app_status
      until:
        - child_app_status.resources | length > 0
        - child_app_status.resources[0].status.sync.status | default('Unknown') == 'Synced'
        - child_app_status.resources[0].status.health.status | default('Unknown') == 'Healthy'
      retries: 60
      delay: 10
      loop:
        - observability-namespace
        - observability-loki
        - observability-alloy
    
    - name: Verify deployments are ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: "{{ item.kind }}"
        name: "{{ item.name }}"
        namespace: "{{ namespace }}"
      register: deployment_check
      until:
        - deployment_check.resources | length > 0
        - deployment_check.resources[0].status.readyReplicas | default(0) > 0
      retries: 30
      delay: 10
      loop:
        - { kind: StatefulSet, name: loki }
        - { kind: Deployment, name: alloy }
    
    - name: Display deployment status
      debug:
        msg: |
          âœ… Log Collection Stack deployed successfully via ArgoCD!
          ================================================
          
          ArgoCD Applications:
          - observability-loki: Synced / Healthy
          - observability-alloy: Synced / Healthy
          
          Services:
          - Loki: http://loki.{{ namespace }}.svc.home-hk1-cluster.orbb.li:3100
          - Alloy: Collecting logs from all pods
          
          Verification:
          kubectl get applications -n {{ gitops_namespace }} | grep observability
          kubectl logs -n {{ namespace }} -l app.kubernetes.io/component=canary --tail=5
          
          GitOps Management:
          - Repository: https://github.com/orbli/homelab.git
          - Config Path: kubernetes/apps/observability/
          
          Note: Any future changes should be made in Git and will be automatically synced by ArgoCD.