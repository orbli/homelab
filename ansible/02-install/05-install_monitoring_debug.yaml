---
- name: Debug and Deploy K8s Monitoring via ArgoCD
  hosts: localhost
  connection: local
  gather_facts: false
  
  tasks:
    # First, let's verify ArgoCD is running
    - name: Check ArgoCD installation status
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: devops
        label_selectors:
          - app.kubernetes.io/name=argocd-server
      register: argocd_pods
      
    - name: Display ArgoCD server status
      debug:
        msg: |
          ArgoCD Server Pods: {{ argocd_pods.resources | length }}
          {% if argocd_pods.resources | length > 0 %}
          Pod Status: {{ argocd_pods.resources[0].status.phase }}
          {% else %}
          ERROR: No ArgoCD server pods found in devops namespace!
          {% endif %}
    
    # Check if ArgoCD CRDs are installed
    - name: Check ArgoCD Application CRD
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: applications.argoproj.io
      register: argocd_crd
      
    - name: Display CRD status
      debug:
        msg: |
          ArgoCD Application CRD exists: {{ argocd_crd.resources | length > 0 }}
    
    # Check if devops namespace exists
    - name: Check devops namespace
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: devops
      register: devops_ns
      
    - name: Display namespace status
      debug:
        msg: |
          Devops namespace exists: {{ devops_ns.resources | length > 0 }}
    
    # Check for any existing k8s-monitoring application
    - name: Check existing k8s-monitoring application
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        namespace: devops
        name: k8s-monitoring
      register: existing_app
      ignore_errors: true
      
    - name: Display existing application status
      debug:
        msg: |
          Existing k8s-monitoring app found: {{ existing_app.resources | length > 0 }}
          {% if existing_app.resources | length > 0 %}
          App Status: {{ existing_app.resources[0].status | default('No status') }}
          {% endif %}
    
    # Remove existing application if it exists and has issues
    - name: Remove existing problematic k8s-monitoring application
      kubernetes.core.k8s:
        api_version: argoproj.io/v1alpha1
        kind: Application
        namespace: devops
        name: k8s-monitoring
        state: absent
        wait: true
        wait_timeout: 300
      when: existing_app.resources | length > 0
      ignore_errors: true
    
    # Wait a bit after removal
    - name: Wait after removal
      pause:
        seconds: 10
      when: existing_app.resources | length > 0
    
    # Create observability namespace first
    - name: Ensure observability namespace exists
      kubernetes.core.k8s:
        name: observability
        api_version: v1
        kind: Namespace
        state: present
    
    # Apply ArgoCD Application for k8s-monitoring with enhanced error handling
    - name: Apply ArgoCD Application for k8s-monitoring
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: k8s-monitoring
            namespace: devops
            finalizers:
              - resources-finalizer.argocd.argoproj.io
            annotations:
              argocd.argoproj.io/sync-wave: "1"
          spec:
            project: default
            source:
              repoURL: https://github.com/orbli/homelab.git
              targetRevision: HEAD
              path: homelab/argocd/k8s-monitoring
            destination:
              server: https://kubernetes.default.svc
              namespace: observability
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
                - ServerSideApply=true
                - RespectIgnoreDifferences=true
      register: app_creation
      
    - name: Display application creation result
      debug:
        msg: |
          Application creation result: {{ app_creation }}
    
    # Check the application was created successfully
    - name: Verify k8s-monitoring application was created
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        namespace: devops
        name: k8s-monitoring
      register: created_app
      
    - name: Display created application info
      debug:
        msg: |
          Application created successfully: {{ created_app.resources | length > 0 }}
          {% if created_app.resources | length > 0 %}
          Application Health: {{ created_app.resources[0].status.health.status | default('Unknown') }}
          Application Sync: {{ created_app.resources[0].status.sync.status | default('Unknown') }}
          {% endif %}
    
    # Wait for ArgoCD Application to be ready (with shorter timeout for debugging)
    - name: Wait for ArgoCD Application to be synced
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: k8s-monitoring
        namespace: devops
        wait: true
        wait_condition:
          type: "Synced"
          status: "True"
        wait_timeout: 180
      register: sync_result
      ignore_errors: true
      
    - name: Display sync result
      debug:
        msg: |
          Sync completed: {{ sync_result.failed is not defined }}
          {% if sync_result.failed is defined %}
          Sync failed, but continuing to check status...
          {% endif %}
    
    # Get final application status
    - name: Get final application status
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        namespace: devops
        name: k8s-monitoring
      register: final_app
      
    - name: Display final application status and troubleshooting info
      debug:
        msg: |
          =============================================================
          K8s Monitoring ArgoCD Application Status:
          =============================================================
          
          Application exists: {{ final_app.resources | length > 0 }}
          {% if final_app.resources | length > 0 %}
          Health Status: {{ final_app.resources[0].status.health.status | default('Unknown') }}
          Sync Status: {{ final_app.resources[0].status.sync.status | default('Unknown') }}
          
          {% if final_app.resources[0].status.conditions is defined %}
          Conditions:
          {% for condition in final_app.resources[0].status.conditions %}
          - Type: {{ condition.type }}
            Status: {{ condition.status }}
            Message: {{ condition.message | default('No message') }}
          {% endfor %}
          {% endif %}
          {% endif %}
          
          =============================================================
          Troubleshooting Commands:
          =============================================================
          
          1. Check ArgoCD server logs:
             kubectl logs -n devops deployment/argocd-server
          
          2. Check application status in detail:
             kubectl get applications -n devops k8s-monitoring -o yaml
          
          3. Check ArgoCD server service:
             kubectl get svc -n devops argocd-server
          
          4. Access ArgoCD UI (if using port-forward):
             kubectl port-forward svc/argocd-server -n devops 8080:443
             Then access: https://localhost:8080
          
          5. Get ArgoCD admin password:
             kubectl -n devops get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          
          6. Check deployed resources in observability namespace:
             kubectl get all -n observability
          
          ============================================================= 