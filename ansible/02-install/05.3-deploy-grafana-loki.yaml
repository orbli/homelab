---
- name: Deploy Grafana Loki for Log Aggregation
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    namespace: observability
    
  tasks:
    - name: Ensure ArgoCD is running
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: gitops
        label_selectors:
          - app.kubernetes.io/name=argocd-application-controller
      register: argocd_pods
      failed_when: argocd_pods.resources | length == 0
    
    - name: Check if observability namespace app exists
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: observability-namespace
        namespace: gitops
      register: namespace_app_check
    
    - name: Deploy observability namespace via ArgoCD if not exists
      shell: |
        kubectl apply -f ../../kubernetes/argocd/observability-namespace/observability-namespace-app.yaml
      when: namespace_app_check.resources | length == 0
      register: namespace_app
      changed_when: "'configured' in namespace_app.stdout or 'created' in namespace_app.stdout"
    
    - name: Wait for namespace ArgoCD app to sync
      shell: |
        ARGOCD_OPTS="--core" argocd app wait observability-namespace \
          --timeout 60 \
          --health \
          --sync
      register: namespace_sync
      changed_when: false
    
    - name: Verify namespace exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
      register: namespace_check
      failed_when: namespace_check.resources | length == 0
    
    - name: Deploy Loki ArgoCD Application
      shell: |
        kubectl apply -f /home/eli/workbench/homelab/kubernetes/argocd/loki/loki-app.yaml
      register: loki_app
      changed_when: "'configured' in loki_app.stdout or 'created' in loki_app.stdout"
    
    - name: Wait for Loki app to sync
      shell: |
        ARGOCD_OPTS="--core" argocd app wait observability-loki \
          --timeout 300 \
          --health \
          --sync
      register: loki_sync
      changed_when: false
    
    - name: Verify Loki deployment
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - app.kubernetes.io/name=loki
      register: loki_pods
      until:
        - loki_pods.resources | length > 0
        - loki_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 0
      retries: 30
      delay: 10
    
    - name: Check Loki service endpoints
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: loki
        namespace: "{{ namespace }}"
      register: loki_service
      failed_when: loki_service.resources | length == 0
    
    - name: Display Loki deployment status
      debug:
        msg: |
          ====================================
          Loki Deployment Complete!
          ====================================
          
          Loki is now running with the following endpoints:
          
          Query Frontend:
          - HTTP: http://loki.{{ namespace }}.svc.{{ cluster_domain | default('home-hk1-cluster.orbb.li') }}:3100
          
          Write Path (for log ingestion):
          - HTTP Push: http://loki.{{ namespace }}.svc.{{ cluster_domain | default('home-hk1-cluster.orbb.li') }}:3100/loki/api/v1/push
          
          Components:
          - Loki (single binary mode with 3 replicas)
          - Memcached for chunks cache
          - Memcached for results cache
          
          Storage:
          - Chunks: Persistent volume (100Gi)
          - Index: Persistent volume  
          - Cache: Memcached
          
          Next Steps:
          1. Deploy Grafana Alloy for log collection (playbook 06)
          2. Configure Grafana datasource for Loki (playbook 08.2)
          3. View logs in Grafana Explore using LogQL
    
    - name: Test Loki health endpoint
      uri:
        url: "http://loki.{{ namespace }}.svc.{{ cluster_domain | default('home-hk1-cluster.orbb.li') }}:3100/ready"
        method: GET
        status_code: 200
      register: loki_health
      retries: 5
      delay: 10
      until: loki_health.status == 200
      ignore_errors: true
    
    - name: Report Loki health status
      debug:
        msg: "Loki health check: {{ 'PASSED' if loki_health.status == 200 else 'FAILED - Manual verification needed' }}"