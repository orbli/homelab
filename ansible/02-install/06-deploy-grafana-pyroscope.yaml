---
- name: Deploy Grafana Pyroscope for Continuous Profiling
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    namespace: observability
    cluster_domain: home-hk1-cluster.orbb.li
    
  tasks:
    - name: Ensure ArgoCD is running
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: StatefulSet
        name: argocd-application-controller
        namespace: gitops
      register: argocd_check
      failed_when: 
        - argocd_check.resources | length == 0
    
    - name: Check if observability namespace app exists
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: observability-namespace
        namespace: gitops
      register: namespace_app_check
    
    - name: Deploy observability namespace via ArgoCD if not exists
      shell: |
        kubectl apply -f /home/eli/workbench/homelab/kubernetes/argocd/observability-namespace/observability-namespace-app.yaml
      when: namespace_app_check.resources | length == 0
      register: namespace_app
      changed_when: "'configured' in namespace_app.stdout or 'created' in namespace_app.stdout"
    
    - name: Wait for namespace ArgoCD app to sync
      shell: |
        ARGOCD_OPTS="--core" argocd app wait observability-namespace \
          --timeout 60 \
          --health \
          --sync
      register: namespace_sync
      changed_when: false
    
    - name: Verify namespace exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
      register: namespace_check
      failed_when: namespace_check.resources | length == 0
    
    - name: Deploy Pyroscope ArgoCD Application
      shell: |
        kubectl apply -f /home/eli/workbench/homelab/kubernetes/argocd/pyroscope/pyroscope-app.yaml
      register: pyroscope_app
      changed_when: "'configured' in pyroscope_app.stdout or 'created' in pyroscope_app.stdout"
    
    - name: Wait for Pyroscope app to sync
      shell: |
        ARGOCD_OPTS="--core" argocd app wait observability-pyroscope \
          --timeout 300 \
          --health \
          --sync
      register: pyroscope_sync
      changed_when: false
    
    - name: Verify Pyroscope deployment
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - app.kubernetes.io/name=pyroscope
      register: pyroscope_pods
      until: pyroscope_pods.resources | length > 0 and
             pyroscope_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 0
      retries: 30
      delay: 10
    
    - name: Check Pyroscope service endpoints
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: pyroscope
        namespace: "{{ namespace }}"
      register: pyroscope_service
      failed_when: pyroscope_service.resources | length == 0
    
    - name: Display Pyroscope deployment status
      debug:
        msg: |
          ====================================
          Pyroscope Deployment Complete!
          ====================================
          
          Pyroscope is now running with the following endpoints:
          
          Query API:
          - HTTP: http://pyroscope.{{ namespace }}.svc.{{ cluster_domain | default('home-hk1-cluster.orbb.li') }}:4040
          
          Ingest API (for sending profiles):
          - HTTP Push: http://pyroscope.{{ namespace }}.svc.{{ cluster_domain | default('home-hk1-cluster.orbb.li') }}:4040/ingest
          
          Supported profile formats:
          - pprof (Go, Python, Ruby, Node.js, Java, etc.)
          - JFR (Java Flight Recorder)
          - eBPF (kernel-level profiling)
          
          Next Steps:
          1. Update Alloy configuration to collect profiles (if needed)
          2. Configure Grafana datasource for Pyroscope (playbook 08.2)
          3. Applications can send profiles to the ingest endpoint
          4. Configure eBPF profiling for system-wide profiling
    
    - name: Test Pyroscope health endpoint
      uri:
        url: "http://pyroscope.{{ namespace }}.svc.{{ cluster_domain | default('home-hk1-cluster.orbb.li') }}:4040/ready"
        method: GET
        status_code: 200
      register: pyroscope_health
      retries: 5
      delay: 10
      until: pyroscope_health.status == 200
      ignore_errors: true
    
    - name: Report Pyroscope health status
      debug:
        msg: "Pyroscope health check: {{ 'PASSED' if pyroscope_health.status == 200 else 'FAILED - Manual verification needed' }}"