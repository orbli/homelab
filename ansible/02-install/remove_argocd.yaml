---
- name: Remove Argo CD installation
  hosts: localhost
  connection: local
  gather_facts: false
  
  tasks:
    - name: Uninstall ArgoCD Helm release
      kubernetes.core.helm:
        name: argocd
        release_namespace: argocd
        state: absent
        wait: true
        timeout: 10m0s
      ignore_errors: true

    - name: Get ArgoCD Custom Resource Definitions
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        label_selectors:
          - app.kubernetes.io/part-of=argocd
      register: argocd_crds
      ignore_errors: true

    - name: Remove ArgoCD Custom Resource Definitions
      kubernetes.core.k8s:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: "{{ item.metadata.name }}"
        state: absent
        wait: true
        wait_timeout: 300
      loop: "{{ argocd_crds.resources | default([]) }}"
      when: argocd_crds.resources is defined
      ignore_errors: true

    - name: Remove additional ArgoCD CRDs by name (fallback)
      kubernetes.core.k8s:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: "{{ item }}"
        state: absent
        wait: true
        wait_timeout: 300
      loop:
        - applications.argoproj.io
        - applicationsets.argoproj.io
        - appprojects.argoproj.io
      ignore_errors: true

    - name: Get ArgoCD ClusterRoles
      kubernetes.core.k8s_info:
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        label_selectors:
          - app.kubernetes.io/part-of=argocd
      register: argocd_clusterroles
      ignore_errors: true

    - name: Remove ArgoCD ClusterRoles by label
      kubernetes.core.k8s:
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        name: "{{ item.metadata.name }}"
        state: absent
        wait: true
        wait_timeout: 300
      loop: "{{ argocd_clusterroles.resources | default([]) }}"
      when: argocd_clusterroles.resources is defined
      ignore_errors: true

    - name: Remove ArgoCD ClusterRoles by name (fallback)
      kubernetes.core.k8s:
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        name: "{{ item }}"
        state: absent
        wait: true
        wait_timeout: 300
      loop:
        - argocd-application-controller
        - argocd-server
        - argocd-dex-server
        - argocd-redis
        - argocd-repo-server
      ignore_errors: true

    - name: Get ArgoCD ClusterRoleBindings
      kubernetes.core.k8s_info:
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        label_selectors:
          - app.kubernetes.io/part-of=argocd
      register: argocd_clusterrolebindings
      ignore_errors: true

    - name: Remove ArgoCD ClusterRoleBindings by label
      kubernetes.core.k8s:
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        name: "{{ item.metadata.name }}"
        state: absent
        wait: true
        wait_timeout: 300
      loop: "{{ argocd_clusterrolebindings.resources | default([]) }}"
      when: argocd_clusterrolebindings.resources is defined
      ignore_errors: true

    - name: Remove ArgoCD ClusterRoleBindings by name (fallback)
      kubernetes.core.k8s:
        api_version: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        name: "{{ item }}"
        state: absent
        wait: true
        wait_timeout: 300
      loop:
        - argocd-application-controller
        - argocd-server
        - argocd-dex-server
        - argocd-redis
        - argocd-repo-server
      ignore_errors: true

    - name: Wait for ArgoCD pods to terminate
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: argocd
      register: argocd_pods
      until: argocd_pods.resources | length == 0
      retries: 30
      delay: 10
      ignore_errors: true

    - name: Force delete any remaining ArgoCD resources in namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: "{{ item.kind }}"
        name: "{{ item.metadata.name }}"
        namespace: "{{ item.metadata.namespace | default('argocd') }}"
        state: absent
        wait: false
      loop: "{{ argocd_pods.resources | default([]) }}"
      when: argocd_pods.resources is defined
      ignore_errors: true

    - name: Remove argocd namespace
      kubernetes.core.k8s:
        name: argocd
        api_version: v1
        kind: Namespace
        state: absent
        wait: true
        wait_timeout: 600
      ignore_errors: true

    - name: Remove ArgoProj Helm repository (optional)
      kubernetes.core.helm_repository:
        name: argo
        state: absent
      ignore_errors: true
      # Uncomment the line below if you want to remove the repository
      # when: remove_helm_repo | default(false) | bool

    - name: Verify ArgoCD removal
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: argocd
      register: namespace_check
      failed_when: false

    - name: Display removal status
      debug:
        msg: |
          ArgoCD removal completed!
          Namespace still exists: {{ namespace_check.resources | length > 0 }}
          {% if namespace_check.resources | length > 0 %}
          Note: If namespace still exists, it may be stuck in 'Terminating' state.
          You can force delete it with: kubectl delete namespace argocd --force --grace-period=0
          {% endif %} 