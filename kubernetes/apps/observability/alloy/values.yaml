# Grafana Alloy Configuration for ArgoCD deployment
# This collects logs, metrics, and traces from all pods

alloy:
  configMap:
    create: true
    content: |
      // ====== LOG COLLECTION ======
      // Discover Kubernetes pods for logs
      discovery.kubernetes "pods" {
        role = "pod"
      }
      
      // Relabel to add metadata for logs
      discovery.relabel "pods" {
        targets = discovery.kubernetes.pods.targets
        
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_node_name"]
          target_label  = "node"
        }
      }
      
      // Collect logs using Kubernetes API
      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pods.output
        forward_to = [loki.write.default.receiver]
      }
      
      // Write logs to Loki
      loki.write "default" {
        endpoint {
          url = "http://loki.observability.svc.home-hk1-cluster.orbb.li:3100/loki/api/v1/push"
        }
      }
      
      // ====== TRACE COLLECTION (OTEL) ======
      // OTLP receiver for traces
      otelcol.receiver.otlp "default" {
        grpc {
          endpoint = "0.0.0.0:4317"
        }
        
        http {
          endpoint = "0.0.0.0:4318"
        }
        
        output {
          traces  = [otelcol.processor.batch.default.input]
        }
      }
      
      // Batch processor for better performance
      otelcol.processor.batch "default" {
        output {
          traces = [otelcol.processor.k8sattributes.default.input]
        }
      }
      
      // Add Kubernetes attributes to traces
      otelcol.processor.k8sattributes "default" {
        extract {
          metadata = ["k8s.namespace.name", "k8s.pod.name", "k8s.deployment.name", "k8s.node.name"]
        }
        
        output {
          traces = [otelcol.exporter.otlp.tempo.input]
        }
      }
      
      // Export traces to Tempo Distributor
      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "tempo-distributor.observability.svc.home-hk1-cluster.orbb.li:4317"
          tls {
            insecure = true
          }
        }
      }

# Deployment configuration
controller:
  type: deployment
  replicas: 1

# Service
service:
  enabled: true
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 12345
      targetPort: 12345
      protocol: TCP
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: otlp-http
      port: 4318
      targetPort: 4318
      protocol: TCP

# RBAC
rbac:
  create: true

# Service Account
serviceAccount:
  create: true
  name: alloy

# Resources
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 512Mi